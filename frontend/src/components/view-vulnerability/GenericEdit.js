import React from "react";
import TextField from "@material-ui/core/TextField";
import TextareaAutosize from "@material-ui/core/TextareaAutosize";
import {getSimplifiedVulnerability, updateVulnerability} from "../../graphql/vulnerability";
import {fetchWrapper} from "../../graphql/ApiService";
import CustomDivider from "./CustomDivider";
import Button from "@material-ui/core/Button";
import ViewGenericScoresBar from "./ViewGenericScoresBar";
import {cvssScoresFields} from "../../graphql/Cvss"
import {SnackBarCtx} from "../../context/SnackBarContext";
import InputLabel from "@material-ui/core/InputLabel";
import Select from "@material-ui/core/Select";
import MenuItem from "@material-ui/core/MenuItem";
import Input from "@material-ui/core/Input";
import {makeStyles} from "@material-ui/core/styles";



import './GenericEdit.css'

const useStyles = makeStyles((theme) => ({
  icon: {}, noIcon: {
    display: "none"
  }
}));

export default function GenericEdit(props) {
  const classes = useStyles();
  const {state, dispatch} = React.useContext(SnackBarCtx);
  const vulnerabilityId = props.vulnerabilityId;
  const editMode = props.editMode;
  const [data, setData] = React.useState({})


  React.useEffect(() => {
    const bodyRequest = getSimplifiedVulnerability(vulnerabilityId, `cveId title description state dueDate ${cvssScoresFields}`);
    fetchWrapper(bodyRequest)
      .then(resData => {
        const vulnerability = resData.data.getVulnerability;
        setData(vulnerability);
      })
      .catch(err => {
        dispatch({type: "OPEN", msg: `${err.message}`})
        console.log(err)
      })
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);


  const onChangeFn = (event) => {
    const {name, value} = event.target;
    setData(prev => {
      return {...prev, [name]: value}
    })
    // this.setValue({value: value});
  }

  const onChangeDateFn = (event) => {
    const {name, value} = event.target;
    setData(prev => {
      return {...prev, [name]: new Date(value).getTime()}
    })
  }


  const submitChanges = (event) => {
    event.preventDefault()

    const requestBody = updateVulnerability(data);
    fetchWrapper(requestBody)
      .then(resData => {
        const res = resData.data.updateVulnerability;
        setData(prevState => {
          return {...prevState, title: res.title, description: res.description}
        });
        dispatch({type: "OPEN", msg: 'Vulnerability info successfully updated.'})
      })
      .catch(err => {
        dispatch({type: "OPEN", msg: `${err.message}`})
        console.log(err)
      })

  }

  const getFormattedDate = () => {
    let dateObj = new Date(Date.now())
    if (data.dueDate) {
      dateObj = new Date(parseInt(data.dueDate))
    }

    const day = (dateObj.getDate() < 10 ? '0' : '') + dateObj.getDate();
    const month = ((dateObj.getMonth() + 1) < 10 ? '0' : '') + (dateObj.getMonth() + 1);
    return `${dateObj.getFullYear()}-${month}-${day}`; // expect format "2021-01-01"
  }

  return (
    <React.Fragment>
      {!editMode && <ViewGenericScoresBar
        scoresData={data.cvssScores}
        editMode={editMode}
      />}
      <form className={`view-edit-form`}>
        <section className={'view-edit-elm'}>
          <section className={'view-edit-elem-row'}>
            <TextField className={`view-edit-elem-row-elem`}
                       id="cveId"
                       label="CVE-ID"
                       value={data.cveId + ' '}
                       onChange={onChangeFn}
                       InputProps={{
                         readOnly: true,
                         disableUnderline: true,
                       }}
            />
            <section className={'view-edit-elem-row-elem'}>
              <InputLabel id={'stateLabel'}>State</InputLabel>
              <Select id={'stateSelect'}
                      name={'state'}
                      labelId={"stateLabel"}
                      value={data.state + ""}
                      onChange={onChangeFn}
                      classes={{
                        icon: editMode ? classes.icon : classes.noIcon
                      }}
                      input={
                        <Input
                          disableUnderline={!editMode}
                          readOnly={!editMode}
                        />
                      }>
                <MenuItem value={"OPEN"}>OPEN</MenuItem>
                <MenuItem value={"FIXED"}>FIXED</MenuItem>
                <MenuItem value={"PENDING"}>PENDING</MenuItem>
                <MenuItem value={"REVIEW"}>REVIEW</MenuItem>
                <MenuItem value={"TESTING"}>TESTING</MenuItem>
              </Select>
            </section>
            <TextField className={'view-edit-elem-row-elem'}
                       id="dueDate"
                       label="Due Date"
                       name={"dueDate"}
                       type="date"
                       value={getFormattedDate()}
                       onChange={onChangeDateFn}

                       InputProps={{
                         inputProps: classes.inputProps,
                         readOnly: !editMode,
                         disableUnderline: !editMode,
                       }}

            />
          </section>
        </section>
        <TextField id="title" label="Title" className={'view-edit-elm'}
                   value={data.title + ' '}
                   onChange={onChangeFn}
                   name={'title'}
                   InputProps={{
                     readOnly: !editMode,
                     disableUnderline: !editMode,
                   }}/>
        <div className={'view-edit-elm'}>
          <label>Description</label>
          {editMode && <TextareaAutosize id="description" label="description" name={'description'}
                                         rowsMin={3}
                                         defaultValue={data.description} onChange={onChangeFn}/>
          }
          {!editMode && <p>{data.description}</p>}

        </div>
      </form>
      {editMode && <section>
        <CustomDivider/>
        <div className={"action-button-save"}>
          <Button variant="contained" color="primary" size="small" onClick={submitChanges}>
            Save
          </Button>
        </div>
      </section>
      }

    </React.Fragment>
  )
}
