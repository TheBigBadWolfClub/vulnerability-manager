import React from "react";
import TextField from "@material-ui/core/TextField";
import TextareaAutosize from "@material-ui/core/TextareaAutosize";
import {getVulnerabilityFn} from "../../graphql/vulnerability";
import {fetchWrapper} from "../ApiService";
import CustomDivider from "../CustomDivider";
import Button from "@material-ui/core/Button";


export default function GenericEdit(props) {
  const vulnerabilityId = props.vulnerabilityId;
  const editMode = props.editMode;
  const [data, setData] = React.useState({})
  const changedTitle = React.createRef();
  const changedDescription = React.createRef();


  React.useEffect(() => {
    fetchWrapper(getVulnerabilityFn(vulnerabilityId))
      .then(resData => {
        const vulnerability = resData.data.getVulnerability;
        setData(vulnerability);
        console.log(data)
      }).catch(err => {
      console.log(err)
    })

  }, []);


  const onChangeFn = (event) => {
    const {name, value} = event.target;
    console.log(event.target.value);
    setData(prev => {
      return {...prev, [name]: value}
    })
    // this.setValue({value: value});
  }


  const submitChanges = (event) => {
    event.preventDefault()
    const requestBody = {
      query: `
      mutation {
        updateGenericData(id: "${vulnerabilityId}", title: "${data.title}", description: "${data.description}") {
          title
          description
        }
      }
      `
    }
    fetchWrapper(requestBody)
      .then(resData => {
        const res = resData.data.updateGenericData;
        setData(prevState => {
          return {...prevState, title: res.title, description: res.description}
        });
        console.log(data)
      }).catch(err => {
      console.log(err)
    })

  }

  return (
    <React.Fragment>
      <form className={`view-edit-form`}>
        <TextField id="cveId" label="CVE-ID" className={`view-edit-elm view-edit-id`}
                   value={data.cveId + ' '}
                   onChange={onChangeFn}
                   InputProps={{
                     readOnly: true,
                     disableUnderline: true,
                   }}
        />
        <TextField ref={changedTitle}
                   id="title" label="Title" className={'view-edit-title view-edit-elm'}
                   value={data.title + ' '}
                   onChange={onChangeFn}
                   name={'title'}
                   InputProps={{
                     readOnly: !editMode,
                     disableUnderline: !editMode,
                   }}/>
        <div className={'view-edit-elm'}>
          <label>Description</label>
          {editMode &&
          <TextareaAutosize
            ref={changedDescription}
            id="description" label="description" name={'description'}
            rowsMin={3}
            defaultValue={data.description} onChange={onChangeFn}/>
          || <p>{data.description}</p>
          }

        </div>
      </form>
      {editMode && <section>
        <CustomDivider/>
        <div className={"view-array-save-action"}>
          <Button variant="contained" color="primary" size="small" onClick={submitChanges}>
            Save
          </Button>
        </div>
      </section>
      }

    </React.Fragment>
  )
}
