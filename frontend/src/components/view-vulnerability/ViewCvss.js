import React from "react";
import {fetchWrapper} from "../../graphql/ApiService";
import {getVulnerabilityFn} from "../../graphql/vulnerability";
import {queryTypes, mutationQuery} from "../../graphql/Cvss";


import ViewCvssSection from "./ViewCvssSection";
import CustomDivider from "./CustomDivider";
import Button from "@material-ui/core/Button";

import './ViewCvss.css'

export default function ViewCvss(props) {
  const vulnerabilityId = props.vulnerabilityId;
  const editMode = props.editMode;
  const [cvssData, setCvssData] = React.useState({})
  const [scoresData, setScoresData] = React.useState({})
  const [helper, setHelper] = React.useState({})
  const base = ['attackVector', 'attackComplexity', 'privilegesRequired', 'userInteraction', 'scope', 'confidentialityImpact', 'integrityImpact', 'availabilityImpact'];
  const temporal = ['exploitCodeMaturity', 'remediationLevel', 'reportConfidence']
  const environment = ['confidentialityRequirement', 'integrityRequirement', 'availabilityRequirement', 'modifiedAttackVector', 'modifiedAttackComplexity', 'modifiedPrivilegesRequired', 'modifiedUserInteraction', 'modifiedScope', 'modifiedConfidentialityImpact', 'modifiedIntegrityImpact', 'modifiedAvailabilityImpact']

  React.useEffect(() => {
    fetchWrapper(queryTypes)
      .then(resData => {
        const types = resData.data.__type.inputFields;
        setHelper(types);
      }).catch(err => {
      console.log(err)
    })

    fetchWrapper(getVulnerabilityFn(vulnerabilityId))
      .then(resData => {
        const cvss = resData.data.getVulnerability.cvss;
        const scores = resData.data.getVulnerability.cvssScores;
        setCvssData(cvss)
        setScoresData(scores)
      }).catch(err => {
      console.log(err)
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const handleChange = (event) => {
    const {name, value} = event.target;
    setCvssData(prev => {
      return {...prev, [name]: value}
    })
  }

  const submitChanges = (event) => {
    event.preventDefault();

    const clone = {...cvssData};
    delete clone._id
    const inputBuilder = Object.entries(clone)
      .map(([key, value], i) => `${key}: ${value}`)
      .join(',');
    const requestBody = mutationQuery(cvssData._id, `{${inputBuilder}}`)
    fetchWrapper(requestBody)
      .then(resData => {
        const cvss = resData.data.updateCvss.cvss;
        const scores = resData.data.updateCvss.cvssScores;
        setCvssData(cvss)
        setScoresData(scores)
      }).catch(err => {
      console.log(err)
    })

  }

  return (
    <React.Fragment>
      <ViewCvssSection
        idSection={"Base"}
        fieldsArray={base}
        cvssData={cvssData}
        scoresData={[scoresData.baseScore, scoresData.baseSeverity]}
        helper={helper}
        editMode={editMode}
        handleChange={handleChange}
      />

      <ViewCvssSection
        idSection={"Temporal"}
        fieldsArray={temporal}
        cvssData={cvssData}
        scoresData={[scoresData.temporalScore, scoresData.temporalSeverity]}
        helper={helper}
        editMode={editMode}
        handleChange={handleChange}
      />

      <ViewCvssSection
        idSection={"Environmental"}
        fieldsArray={environment}
        cvssData={cvssData}
        scoresData={[scoresData.environmentalScore, scoresData.environmentalSeverity]}
        helper={helper}
        editMode={editMode}
        handleChange={handleChange}
      />

      {editMode && <section>
        <CustomDivider/>
        <div className={"action-button-save"}>
          <Button variant="contained" color="primary" size="small" onClick={submitChanges}>
            Save
          </Button>
        </div>
      </section>
      }

    </React.Fragment>
  )
}
