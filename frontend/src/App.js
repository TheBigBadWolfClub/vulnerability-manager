import './App.css';
import React, {useState} from 'react'
import {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';

import LoginPage from './pages/Login'
import CvssPage from './pages/Cvss'
import VulnerabilitiesPage from './pages/Vulnerabilities'
import MainNavigation from './components/navigation/MainNavigation'

// context
import LoginContext from './context/login-context'
import CreateVulnerability from "./pages/CreateVulnerability";
import ViewVulnerability from "./components/ViewVulnerability";

function App() {
  const jsonToken = JSON.parse(localStorage.getItem('authData'));
  let initAuth = {token: null, userId: null, tokenExpiration: null, role: null};
  if(jsonToken && jsonToken.token) {
    initAuth = jsonToken;
  }
  const [authData, setAuthData] = useState({...initAuth});

  const login = (authData) => {
    setAuthData({...authData});
    localStorage.setItem("authData", JSON.stringify(authData));
  }

  const logout = () => {
    setAuthData({token: null, userId: null, tokenExpiration: null, role: null})
    localStorage.setItem("authData", null);
  }

  return (
    <BrowserRouter>
      <React.Fragment>
        <LoginContext.Provider value={{
          authData: authData,
          login: login,
          logout: logout
        }}>
          <MainNavigation/>
          <main className="main-content">
            <Switch>
              {authData.token && <Redirect from="/" to="/vulnerabilities" exact/>}
              {authData.token && <Redirect from="/login" to="/vulnerabilities" exact/>}
              <Route path="/vulnerabilities" component={VulnerabilitiesPage}/>
              {authData.token && <Route path="/view/:id" component={ViewVulnerability}/>}
              {authData.token && <Route path="/create-vulnerability" component={CreateVulnerability}/>}
              {authData.token && <Route path="/cvss" component={CvssPage}/>}
              {!authData.token && <Route path="/login" component={LoginPage}/>}
              {!authData.token && <Route path="/login" component={LoginPage}/>}
              {!authData.token && <Redirect to="/login" />}
            </Switch>
          </main>
        </LoginContext.Provider>
      </React.Fragment>
    </BrowserRouter>
  );
}

export default App;
