#!/usr/bin/env node

/**
 * load .env variables
 */
const path = require('path');
const DOT_ENV_FILE = path.resolve(__dirname, '../.env');
require('dotenv').config({path: DOT_ENV_FILE});

/**
 * Module dependencies.
 */
const expressApp = require('../app/app');
const {connectMongo} = require("../app/core/mongo");
const debug = require('debug')('vulnerability:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '8080');
expressApp.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(expressApp);
(async () => {
    try {
        await connectMongo(process.env.MONGO_DB_ADR, process.env.MONGO_DB, process.env.MONGO_USER, process.env.MONGO_PASSWORD, process.env.MONGO_DOCKER)

        /**
         * Listen on provided port, on all network interfaces.
         */
        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
        console.log(`Running a GraphQL API server at http://localhost:${port}/graphql`);
        console.log(`Running a Vulnerability Site at http://localhost:${port}`);
    } catch (e) {
        console.log(e);
    }
})();


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
onListening = () => {
    const addr = server.address();
    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
