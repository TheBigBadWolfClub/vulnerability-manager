const userRepository = require("./repository");
const {ObjectId} = require("mongoose/lib/types");
const app = require("../app");
const request = require('supertest');

const userService = require("./service");
jest.mock('./service');

const jwt = require('jsonwebtoken')
jest.mock('jsonwebtoken')

const userMock = new userRepository({
    _id: ObjectId("61483aa5e6dcd5bb6b2c9c58"),
    username: "username",
    password: "password",
    role: "ADMINISTRATOR",
    schema_version: 0
});


describe("getAll", () => {

    test('requires auth ', async () => {
        const res = await request(app)
            .get('/api/users')
        expect(res.statusCode).toEqual(403)

    })

    test('empty list', async () => {
        jwt.verify.mockResolvedValue({userID: "username"})
        userService.list.mockResolvedValue([]);
        const res = await request(app)
            .get('/api/users')
            .set('Authorization', "Bearer token")

        expect(res.statusCode).toEqual(200)
        expect(res.body).toEqual([])
    })

    test('list not empty', async () => {
        jwt.verify.mockResolvedValue({userID: "username"})
        userService.list.mockResolvedValue([userMock]);
        const res = await request(app)
            .get('/api/users')
            .set('Authorization', "Bearer token")

        expect(res.statusCode).toEqual(200)
        expect(res.body).toEqual([{
            name: userMock.username,
            role: userMock.role
        }])

    })
})

describe("getUser", () => {
    const uri = '/api/users/admin'
    test('requires auth ', async () => {
        const res = await request(app)
            .get(uri)
        expect(res.statusCode).toEqual(403)

    })


    test('get user with success', async () => {
        jwt.verify.mockResolvedValue({userID: "username"})
        userService.get.mockResolvedValue(userMock);
        const res = await request(app)
            .get(uri)
            .set('Authorization', "Bearer token")

        expect(res.statusCode).toEqual(200)
        expect(res.body).toEqual({
            name: userMock.username,
            role: userMock.role
        })

    })
})


describe("login", () => {
    const uri = '/api/login'


    test('log with with success', async () => {
        userService.login.mockResolvedValue({
            user: userMock,
            token: "token",
            tokenExpiration: 24,
        });
        const res = await request(app)
            .post(uri)
            .type("form")
            .send({ username: "user", password:"pass" })

        expect(res.statusCode).toEqual(200)
        expect(res.body).toEqual({
            username: userMock.username,
            token: "token",
            tokenExpiration: 24,
            role: userMock.role
        })

    })
})