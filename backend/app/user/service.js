const userRepo = require("./repository");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const {buildError} = require("../core/app-error");

module.exports = {
    list: async () => {
        return  await userRepo.find();
    },
    get: async (username) => {
        const entity = await userRepo.findOne({username: username});
        if (!entity) {
            throw buildError(404);
        }
        return entity
    },
    createUser: async (username, password, role) => {
        const existingUser = await userRepo.findOne({username: username});
        if (existingUser) {
            throw buildError(409, 'User already exists.');
        }

        const user = new userRepo({
            username: username,
            password: password,
            role: role
        });

        const result = await user.save();
        return {...result._doc, _id: result.id};
    },
    login: async (username, password) => {
        const user = await userRepo.findOne({username: username})
        if (!user) {
            throw   buildError(401)
        }

        const isEqual = await bcrypt.compare(password, user.password)
        if (!isEqual) {
            throw    buildError(403)
        }

        const token = jwt.sign({userId: user.id, username: user.username},
            'tokenhash',
            {expiresIn: '24h'})

        return {
            user: user._doc,
            token: token,
            tokenExpiration: 24,
        }
    }
}