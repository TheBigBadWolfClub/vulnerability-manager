const {users, createUser, login} = require("./resolver");
const userService = require("../service");

const {AUTH_REQUIRED_ERROR, buildError} = require("../../core/app-error");
const userRepository = require("../repository");
const {ObjectId} = require("mongoose/lib/types");

jest.mock('../service');

const userMock = new userRepository({
    _id: ObjectId("61483aa5e6dcd5bb6b2c9c58"),
    username: "username",
    password: "password",
    role: "ADMINISTRATOR",
    schema_version: 0
});

describe("users", () => {


    test('user not authenticated', async () => {
         users(undefined, jest.fn())
            .catch(error => {
                expect(error).toEqual(AUTH_REQUIRED_ERROR)
            });
    })

    test('get empty list', async () => {
         userService.list.mockResolvedValue([]);
        const list = await users(undefined, {isAuth: true});
        expect(list).toEqual([])
    })

    test('get with elements', async () => {
         userService.list.mockResolvedValue([userMock]);
        const list = await users(undefined, {isAuth: true});
        expect(list.length).toEqual(1)
        expect(list).toContainEqual([userMock])
    })
})

describe("createUser", () => {

    test('user not authenticated', async () => {
         createUser(undefined, jest.fn())
            .catch(error => {
                expect(error).toEqual(AUTH_REQUIRED_ERROR)
            });
    })

    test('invalid params', async () => {
        const appError = buildError(409)
        userService.createUser.mockImplementation(() => {
            throw appError;
        });
        createUser({
            userInput: {
                username: userMock.username,
                password: userMock.password,
                role: userMock.role,
            }
        }, {isAuth: true})
            .catch(err => {
                expect(err).toEqual(appError.toGraphQL())
            })

    })

    test('create with success', async () => {
        userService.createUser.mockResolvedValue(userMock);
        const newUser = await createUser({
            userInput: {
                username: userMock.username,
                password: userMock.password,
                role: userMock.role,
            }
        }, {isAuth: true});
        expect(newUser).toEqual(userMock)
    })

})


describe("login", () => {

    test('invalid params', async () => {
        const appError = buildError(401)
        userService.login.mockImplementation(() => {
            throw appError;
        });
         login({username: "username", password: "password"})
            .catch(err => {
                expect(err).toEqual(appError.toGraphQL())
            })

    })

    test('user does not exist', async () => {
        userService.login.mockResolvedValue({
            user: userMock,
            token: "token",
            tokenExpiration: 24,
        });
        const auth = await login({username: "username", password: "password"})

        expect(auth.token).toBeDefined()
        expect(auth.userId).toEqual(userMock._id)
        expect(auth.tokenExpiration).toEqual(24)
        expect(auth.role).toEqual(userMock.role)

    })

})
