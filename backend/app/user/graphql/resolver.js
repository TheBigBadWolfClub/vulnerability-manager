const bcrypt = require('bcrypt')
const User = require('../repository');
const jwt = require('jsonwebtoken')

module.exports = {
    users: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        try {
            const users = await User.find();
            return users.map(user => {
                return {
                    ...user._doc,
                    _id: user.id,
                    username: user.username,
                    password: user.password,
                    type: user.type
                };
            });
        } catch (err) {
            throw err;
        }
    },
    createUser: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        try {
            const inputs = args.userInput;
            const existingUser = await User.findOne({username: inputs.username});
            if (existingUser) {
                throw new Error('User already exists.');
            }


            const user = new User({
                username: inputs.username,
                password: inputs.password,
                role: inputs.role
            });

            const result = await user.save();

            return {...result._doc, _id: result.id};
        } catch (err) {
            throw err;
        }
    },
    login: async ({username, password}) => {
        const user = await User.findOne({username: username})
        if (!user) {
            throw  new Error('Invalid authentication.')
        }

        const isEqual = await bcrypt.compare(password, user.password)
        if (!isEqual) {
            throw  new Error('Invalid authentication.')
        }

        const token = jwt.sign({userId: user.id, username: user.username},
            'tokenhash',
            {expiresIn: '24h'})

        return {
            userId: user.id,
            token: token,
            tokenExpiration: 24,
            role: user.role
        }
    }
};
