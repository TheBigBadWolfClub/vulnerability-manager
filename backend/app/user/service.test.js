const userService = require('./service');
const userRepository = require('./repository');

const mockingoose = require('mockingoose');
const {ObjectId} = require("mongoose/lib/types");

const userMock = new userRepository({
    _id: ObjectId("61483aa5e6dcd5bb6b2c9c58"),
    username: "username",
    password: "password",
    role: "role",
    schema_version: 0
});

describe('list', () => {
    test(' expect to be empty', async () => {
        mockingoose(userRepository).toReturn([], 'find')
        const result = await userService.list();
        expect(result).toEqual([])
    })


    test(' to return a item', async () => {


        mockingoose(userRepository).toReturn([userMock], 'find')
        const result = await userService.list();
        expect(result).toContainEqual(userMock)
    })

})

describe('get', () => {

    test(' not found', async () => {
        mockingoose(userRepository).toReturn(undefined, 'findOne')
        userService.get("user").catch(error => {
            expect(error.code).toBe(404);
        })
    })

    test(' found user', async () => {
        mockingoose(userRepository).toReturn(userMock, 'findOne')
        const user = await userService.get("user")
        expect(user).toEqual(userMock)
    })

})


describe('createUser', () => {

    test('user exists', async () => {
        mockingoose(userRepository).toReturn(userMock, 'findOne')
        userService.createUser("user", "pass").catch(error => {
            expect(error.code).toBe(409);
        })
    })

    test('success creat', async () => {
        const _doc = {
            _id: '507f191e810c19729de860ea',
            username: 'user',
            password: 'pass',
            role: 'ADMINISTRATOR',
        };

        mockingoose(userRepository)
            .toReturn(undefined, 'findOne')
            .toReturn(_doc, 'save')
        const user = await userService.createUser("user", "pass")
        expect(user).toEqual({..._doc, schema_version: 0})
    })
})


describe('login', () => {

    test('user not exist', async () => {
        mockingoose(userRepository).toReturn(undefined, 'findOne')
        userService.login("user", "pass").catch(error => {
            expect(error.code).toBe(401);
        })
    })

    test('password is wrong', async () => {
        mockingoose(userRepository).toReturn(userMock, 'findOne')
        await userService.login("user", "wrong")
            .catch(error => {
                expect(error.code).toBe(403);
            })
    })

    test('authenticated with success', async () => {
        // hash: for "admin"
        hash = '$2b$12$DIitdXrE9SAqCs1IKCNbDuVUkUi1pMbHOXHBybXpX.c/8OZNz0Ywi'
        const _doc = {
            _id: ObjectId("61483aa5e6dcd5bb6b2c9c58"),
            username: 'user',
            password: hash,
            role: 'ADMINISTRATOR',
        };
        mockingoose(userRepository).toReturn(_doc, 'findOne')
        const auth  = await userService.login(userMock.username, "admin")

        expect(auth.token).toBeDefined()
        expect(auth.user).toEqual({..._doc, schema_version: 0})
        expect(auth.tokenExpiration).toEqual(24)
    })
})



