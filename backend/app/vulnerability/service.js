const vulnerabilityRepo = require('./repository')
const cvssRepo = require("../cvss/repository");
const cvssScoresRepo = require("../cvss-scores/repository");
const {buildError} = require("../core/app-error");

module.exports = {
    get: async (id) => {
        const entity = await vulnerabilityRepo.findById(id);
        if (!entity) {
            throw buildError(404);
        }
        return entity
    },
    list: async () => {
        return await vulnerabilityRepo.find();
    },
    addArrayEntry: async (id, fieldId, values) => {
        const entity = await vulnerabilityRepo.findById(id);
        if (!entity) {
            throw buildError(404);
        }
        entity[fieldId] = values;
        entity.save();
        return entity;
    },
    update: async (id, title, description, dueDate, state) => {
        const entity = await vulnerabilityRepo.findById(id);
        if (!entity) {
            throw buildError(404);
        }
        entity.title = title;
        entity.description = description;
        entity.dueDate = dueDate;
        entity.state = state;
        entity.save();
        return entity;
    },
    delete: async (id) => {
        const entity = await vulnerabilityRepo.findById(id);
        if (entity !== null) await vulnerabilityRepo.deleteOne(entity);
        return Promise.resolve()
    },
    create: async (title, description, dueDate, state, cveId) => {
        // new vulnerability
        const newVulnerability = new vulnerabilityRepo({
            title: title,
            description: description,
            dueDate: dueDate,
            state: state,
            cveId: cveId
        });

        // new CVSS
        const newCvss = new cvssRepo();

        // new CVSS-Scores
        const newCvssScores = new cvssScoresRepo({});


        // save to DB
        let vulnerabilityDB;
        // create scores collection
        const cvssScoresDB = await newCvssScores.save();
        newVulnerability.cvssScores = cvssScoresDB._doc._id;
        newCvss.cvssScores = cvssScoresDB._doc._id;

        // create vulnerability collection
        vulnerabilityDB = await newVulnerability.save();
        newCvss.vulnerability = vulnerabilityDB;

        // create cvss collection
        const cvss = await newCvss.save();

        // update cvss ID in vulnerability collection
        vulnerabilityDB.cvss = cvss._doc._id;
        return await vulnerabilityDB.save()
    },
}