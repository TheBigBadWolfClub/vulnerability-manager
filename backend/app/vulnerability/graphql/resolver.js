const vulnerabilityService = require('../service');
const {transformVulnerability} = require('../../core/graphql/resolver-mappers')
const {ApiError, AUTH_REQUIRED_ERROR} = require("../../core/app-error");

const self = module.exports = {
    getVulnerability: async (args) => {
        try {
            const result = await vulnerabilityService.get(args.id);
            return transformVulnerability(result);
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    vulnerabilities: async () => {
        try {
            const results = await vulnerabilityService.list()
            return results.map(vulnerability => {
                return transformVulnerability(vulnerability);
            })
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    addArrayEntry: async (args, req) => {
        if (!req.isAuth) {
            throw AUTH_REQUIRED_ERROR
        }
        try {
            return await vulnerabilityService.addArrayEntry(args.id, args.fieldId, args.values);
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    updateVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw AUTH_REQUIRED_ERROR
        }
        const inputs = args.input;
        try {
            return await vulnerabilityService.update(inputs.id, inputs.title,
                inputs.description, inputs.dueDate, inputs.state);
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    deleteVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw AUTH_REQUIRED_ERROR
        }
        try {
            await vulnerabilityService.delete(args.id);
            return await self.vulnerabilities();
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    createVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw AUTH_REQUIRED_ERROR
        }

        try {
            const inputs = args.input;

            // new vulnerability
            const entity = await vulnerabilityService.create(
                inputs.title, inputs.description, inputs.dueDate,
                inputs.state, inputs.cveId
            )
            return await transformVulnerability(entity)
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    }
}
