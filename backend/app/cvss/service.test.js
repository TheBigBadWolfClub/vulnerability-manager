const mockingoose = require("mockingoose");
const cvssRepository = require("./repository");
const cvssService = require("./service");
const {ObjectId} = require("mongoose/lib/types");

const cvssMock = new cvssRepository({
    _id: ObjectId("61483aa5e6dcd5bb6b2c9c58"),
})

describe('get', () => {

    test(' not found', async () => {
        mockingoose(cvssRepository).toReturn(undefined, 'findOne')// findById is findOne
        cvssService.get("123").catch(error => {
            expect(error.code).toBe(404);
        })
    })

    test(' found cvss', async () => {
        mockingoose(cvssRepository).toReturn(cvssMock, 'findOne')// findById is findOne
        const cvss = await cvssService.get("123")
        expect(cvss).toBeDefined() // todo: improve to equality
    })
})

describe('list', () => {

    test(' empty list', async () => {
        mockingoose(cvssRepository).toReturn([], 'find')
        const list = await cvssService.list()
        expect(list).toEqual([])
    })

    test(' list with items', async () => {
        mockingoose(cvssRepository).toReturn([cvssMock], 'find')
        const list = await cvssService.list()
        expect(list.length).toEqual(1)// todo: improve to equality
    })
})

describe('update', () => {

    test('not found', async () => {
        mockingoose(cvssRepository).toReturn(undefined, 'findOne')// findById is findOne
        cvssService.update({}).catch(error => {
            expect(error.code).toBe(404);
        })
    })

    // TODO test not finished due to pre save action, figure how to mock this
    xtest('updated with success', async () => {
        mockingoose(cvssRepository).toReturn(cvssMock, 'findOne')// findById is findOne
        mockingoose(cvssRepository).toReturn(cvssMock, 'save')
        const entity = await cvssService.update({})
        expect(entity).toBeDefined()
    })
})