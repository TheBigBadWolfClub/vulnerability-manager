const vulnerabilityResolver = require('../../vulnerability/graphql/resolver')
const {transformCVSS} = require('../../core/graphql/resolver-mappers')
const cvssService = require("../service");
const {ApiError} = require("../../core/app-error");

module.exports = {
    cvss: async (cvssId) => {
        try {
            const entity = await cvssService.get(cvssId);
            return transformCVSS(entity);
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    allCvss: async () => {
        try {
            const results = await cvssService.list();
            return results.map(cvss => transformCVSS(cvss));
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    },
    updateCvss: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        try {
            const curr = await cvssService.update(args);
            const updated = Object.assign(curr, args.input)
            updated.save();

            return await vulnerabilityResolver.getVulnerability({id: updated._doc.vulnerability.toString()})
        } catch (err) {
            if (err instanceof ApiError)
                throw err.toGraphQL()
            throw err;
        }
    }
}
