const Vulnerability = require('../../models/vulnerability')
const CVSS = require('../../models/commonVulnerabilityScoreSystem')
const CvssScores = require('../../models/cvss-scores')
const {transformVulnerability} = require('../resolvers/mappers')

const self = module.exports = {
    getVulnerability: async (args) => {
        try {
            const result = await Vulnerability.findById(args.id);
            return transformVulnerability(result);
        } catch (e) {
            throw e;
        }
    },
    vulnerabilities: async () => {
        try {
            const results = await Vulnerability.find();
            return results.map(vulnerability => {
                return transformVulnerability(vulnerability);
            })
        } catch (e) {
            throw e;
        }
    },
    addArrayEntry: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        try {
            const curr = await Vulnerability.findById(args.id);
            curr[args.fieldId] = args.values;
            curr.save();
            return curr;
        } catch (err) {
            throw err;
        }
    },
    updateVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        const inputs = args.input;
        try {
            const curr = await Vulnerability.findById(inputs.id);
            curr.title = inputs.title;
            curr.description = inputs.description;
            curr.dueDate = inputs.dueDate;
            curr.state = inputs.state;
            curr.save();
            return curr;
        } catch (err) {
            throw err;
        }
    },
    deleteVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }
        try {
            const vulner = await Vulnerability.findById(args.id);
            if (vulner !== null) await Vulnerability.deleteOne(vulner);
            return await self.vulnerabilities();
        } catch (err) {
            throw err;
        }
    },
    createVulnerability: async (args, req) => {
        if (!req.isAuth) {
            throw new Error('Unauthenticated!');
        }

        const inputs = args.input;

        // new vulnerability
        const newVulnerability = new Vulnerability({
            cveId: inputs.cveId,
            title: inputs.title,
            description: inputs.description,
            dueDate: inputs.dueDate,
            state: inputs.state
        });

        // new CVSS
        const newCvss = new CVSS();

        // new CVSS-Scores
        const newCvssScores = new CvssScores({});


        // save to DB
        let vulnerabilityDB;
        try {
            // create scores collection
            const cvssScoresDB = await newCvssScores.save();
            newVulnerability.cvssScores = cvssScoresDB._doc._id;
            newCvss.cvssScores = cvssScoresDB._doc._id;

            // create vulnerability collection
            vulnerabilityDB = await newVulnerability.save();
            newCvss.vulnerability = vulnerabilityDB;

            // create cvss collection
            const cvss = await newCvss.save();

            // update cvss ID in vulnerability collection
            vulnerabilityDB.cvss = cvss._doc._id;
            const updated = await vulnerabilityDB.save()

            // return vulnerability
            return await transformVulnerability(updated);
        } catch (err) {
            console.log(err);
            throw err;
        }
    }
}
