const mongoose = require('mongoose');
const CvssScores = require('./cvss-scores')

const Schema = mongoose.Schema;
const AttackVectorType = ['NETWORK', 'ADJACENT_NETWORK', 'LOCAL', 'PHYSICAL'];
const AttackComplexityType = ['HIGH', 'LOW'];
const PrivilegesRequiredType = ['HIGH', 'LOW', 'NONE'];
const UserInteractionType = ['NONE', 'REQUIRED'];
const ScopeType = ['UNCHANGED', 'CHANGED'];
const CiaType = ['NONE', 'LOW', 'HIGH'];
const ExploitCodeMaturityType = ['UNPROVEN', 'PROOF_OF_CONCEPT', 'FUNCTIONAL', 'HIGH', 'NOT_DEFINED'];
const RemediationLevelType = ['OFFICIAL_FIX', 'TEMPORARY_FIX', 'WORKAROUND', 'UNAVAILABLE', 'NOT_DEFINED'];
const ConfidenceType = ['UNKNOWN', 'REASONABLE', 'CONFIRMED', 'NOT_DEFINED'];
const CiaRequirementType = ['LOW', 'MEDIUM', 'HIGH', 'NOT_DEFINED'];
const ModifiedAttackVectorType = ['NETWORK', 'ADJACENT_NETWORK', 'LOCAL', 'PHYSICAL', 'NOT_DEFINED'];
const ModifiedAttackComplexityType = ['HIGH', 'LOW', 'NOT_DEFINED'];
const ModifiedPrivilegesRequiredType = ['HIGH', 'LOW', 'NONE', 'NOT_DEFINED'];
const ModifiedUserInteractionType = ['NONE', 'REQUIRED', 'NOT_DEFINED'];
const ModifiedScopeType = ['UNCHANGED', 'CHANGED', 'NOT_DEFINED'];
const ModifiedCiaType = ['LOW', 'MEDIUM', 'HIGH', 'NOT_DEFINED'];
const SeverityType = ['NONE', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL'];
const CommonVulnerabilityScoreSystemSchema = new Schema({
  schema_version: {
    type: Number,
    default: 0
  },
  attackVector: {
    type: String,
    enum: AttackVectorType,
    require: true
  },
  attackComplexity: {
    type: String,
    enum: AttackComplexityType,
    require: true
  },
  privilegesRequired: {
    type: String,
    enum: PrivilegesRequiredType,
    default: 'NONE'
  },
  userInteraction: {
    type: String,
    enum: UserInteractionType,
    default: 'NONE'
  },
  scope: {
    type: String,
    enum: ScopeType,
    default: 'UNCHANGED'
  },
  confidentialityImpact: {
    type: String,
    enum: CiaType,
    default: 'NONE'
  },
  integrityImpact: {
    type: String,
    enum: CiaType,
    default: 'NONE'
  },
  availabilityImpact: {
    type: String,
    enum: CiaType,
    default: 'NONE'
  },
  exploitCodeMaturity: {
    type: String,
    enum: ExploitCodeMaturityType,
    default: 'NOT_DEFINED'
  },
  remediationLevel: {
    type: String,
    enum: RemediationLevelType,
    default: 'NOT_DEFINED'
  },
  reportConfidence: {
    type: String,
    enum: ConfidenceType,
    default: 'NOT_DEFINED'
  },
  confidentialityRequirement: {
    type: String,
    enum: CiaRequirementType,
    default: 'NOT_DEFINED'
  },
  integrityRequirement: {
    type: String,
    enum: CiaRequirementType,
    default: 'NOT_DEFINED'
  },
  availabilityRequirement: {
    type: String,
    enum: CiaRequirementType,
    default: 'NOT_DEFINED'
  },
  modifiedAttackVector: {
    type: String,
    enum: ModifiedAttackVectorType,
    default: 'NOT_DEFINED'
  },
  modifiedAttackComplexity: {
    type: String,
    enum: ModifiedAttackComplexityType,
    default: 'NOT_DEFINED'
  },
  modifiedPrivilegesRequired: {
    type: String,
    enum: ModifiedPrivilegesRequiredType,
    default: 'NOT_DEFINED'
  },
  modifiedUserInteraction: {
    type: String,
    enum: ModifiedUserInteractionType,
    default: 'NOT_DEFINED'
  },
  modifiedScope: {
    type: String,
    enum: ModifiedScopeType,
    default: 'NOT_DEFINED'
  },
  modifiedConfidentialityImpact: {
    type: String,
    enum: ModifiedCiaType,
    default: 'NOT_DEFINED'
  },
  modifiedIntegrityImpact: {
    type: String,
    enum: ModifiedCiaType,
    default: 'NOT_DEFINED'
  },
  modifiedAvailabilityImpact: {
    type: String,
    enum: ModifiedCiaType,
    default: 'NOT_DEFINED'
  },
  vulnerability: {
    type: Schema.Types.ObjectId,
    ref: 'Vulnerability',
  },
  cvssScores: {
    type: Schema.Types.ObjectId,
    ref: 'CvssScores',
    require: true
  }
}, {timestamps: true})

CommonVulnerabilityScoreSystemSchema.pre('save', async function (next) {
  // check if password is present and is modified.
  try {
    const {fullVector} = require('../cvss-helper')
    const {CVSS31} = require('../cvsscalc31')
    const vector = fullVector(this);
    const output = CVSS31.calculateCVSSFromVector(vector)
    if (output.success === true) {
      const scoresDB = await CvssScores.findById(this._doc.cvssScores._id);

      scoresDB.baseScore = output.baseMetricScore;
      scoresDB.baseSeverity = output.baseSeverity.toUpperCase();
      scoresDB.baseISS = output.baseISS;
      scoresDB.baseImpact = output.baseImpact;
      scoresDB.baseExploitability = output.baseExploitability;
      scoresDB.temporalScore = output.temporalMetricScore;
      scoresDB.temporalSeverity = output.temporalSeverity.toUpperCase();
      scoresDB.environmentalScore = output.environmentalMetricScore;
      scoresDB.environmentalSeverity = output.environmentalSeverity.toUpperCase();
      scoresDB.environmentalMISS = output.environmentalMISS;
      scoresDB.environmentalModifiedImpact = output.environmentalModifiedImpact;
      scoresDB.environmentalModifiedExploitability = output.environmentalModifiedExploitability;
      scoresDB.vectorString = output.vectorString;
      scoresDB.vulnerability = this.vulnerability;
      scoresDB.cvss = this._doc._id;
      scoresDB.save();
    } else {
      console.log('Fail to update CVSS scores');
    }
    next();
  } catch (err) {
    next(err);
  }
});

module.exports = mongoose.model('CVSS', CommonVulnerabilityScoreSystemSchema);
